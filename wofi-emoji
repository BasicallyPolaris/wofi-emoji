#!/bin/bash

set -euo pipefail

# Help function
show_help() {
    cat << EOF
Usage: wofi-emoji [OPTIONS]

OPTIONS:
    -l, --languages LANG1,LANG2    Specify languages to fetch (comma-separated)
                                   Available: en, de, es, fr, it, pt, ru, ja, ko, zh, etc.
                                   Default: en
    -f, --force                    Force refresh of cached database
    -h, --help                     Show this help message

Examples:
    wofi-emoji                            # Use English only (default)
    wofi-emoji -l en,de                   # Use English and German
    wofi-emoji -l de,fr,es -f             # Use German, French, Spanish and force refresh even if same languages
EOF
}

# Default configuration
LANGUAGES="en"
FORCE_REFRESH=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--languages)
            LANGUAGES="$2"
            shift 2
            ;;
        -f|--force)
            FORCE_REFRESH=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Set up cache directory
if [[ -n "${XDG_CACHE_HOME:-}" ]]; then
    CACHE_DIR="$XDG_CACHE_HOME/wofi-emoji"
else
    CACHE_DIR="$HOME/.cache/wofi-emoji"
fi

# Normalize languages for consistent caching (sort and remove spaces)
NORMALIZED_LANGS=$(echo "$LANGUAGES" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sort | tr '\n' ',' | sed 's/,$//')
CACHED_DB="$CACHE_DIR/emoji-database-$NORMALIZED_LANGS"

# Check if we need to refresh the cache - exit early if not needed
if [[ "$FORCE_REFRESH" != true ]] && [[ -f "$CACHED_DB" ]]; then
    # Database exists for these exact languages and no force refresh - skip to wofi
    SELECTED="$(wofi -p "emoji" --show dmenu -i < "$CACHED_DB")"
    
    # Extract just the emoji if something was selected
    if [[ -n "$SELECTED" ]]; then
        EMOJI=$(echo "$SELECTED" | sed 's/ .*//')
        
        # Check for required tools only when we need to use them
        if command -v wtype &> /dev/null; then
            wtype "$EMOJI"
        else
            echo "Warning: wtype not found, cannot type emoji" >&2
        fi
        
        if command -v wl-copy &> /dev/null; then
            wl-copy "$EMOJI"
        else
            echo "Warning: wl-copy not found, cannot copy emoji" >&2
        fi
    fi
    exit 0
fi

# If we get here, we need to build/rebuild the database
# Check for required tools for database building
for cmd in curl jq; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: $cmd is required for building the database but not installed."
        exit 1
    fi
done

# Create cache directory if it doesn't exist
mkdir -p "$CACHE_DIR"

# Function to fetch emoji data for a language
fetch_language_data() {
    local lang="$1"
    local url="https://cdn.jsdelivr.net/npm/emojibase-data@latest/${lang}/data.json"
    
    if curl --fail --silent --show-error "$url"; then
        return 0
    else
        echo "Warning: Failed to fetch data for language: $lang" >&2
        return 1
    fi
}

echo "Building emoji database for languages: $NORMALIZED_LANGS..." >&2

# Convert comma-separated languages to array
IFS=',' read -ra LANG_ARRAY <<< "$NORMALIZED_LANGS"

# Create a JSON object with all language data
LANG_DATA="{"
FIRST_LANG=true

for lang in "${LANG_ARRAY[@]}"; do
    lang=$(echo "$lang" | xargs)
    
    if [[ "$FIRST_LANG" == false ]]; then
        LANG_DATA+=","
    fi
    FIRST_LANG=false
    
    echo "Fetching $lang emoji data..." >&2
    if LANG_JSON=$(fetch_language_data "$lang"); then
        LANG_DATA+="\"$lang\":$LANG_JSON"
        echo "✓ Fetched $lang emoji data" >&2
    else
        # Remove the comma if this was not the first language and we failed
        if [[ "$LANG_DATA" == *"," ]]; then
            LANG_DATA="${LANG_DATA%,}"
        fi
    fi
done
LANG_DATA+="}"

# Process and merge the data
echo "$LANG_DATA" | jq -r '
# Store the root data
. as $all_data |

# Get all language keys
keys as $langs |

# Get emoji data from the first available language to establish order
(.[$langs[0]] // .[$langs | sort | .[0]]) as $base_lang |

# Process each emoji
$base_lang[] |
select(.emoji != null and .label != null) |
.emoji as $current_emoji |

# Collect data for this emoji from all languages
[
    $langs[] as $lang |
    ($all_data[$lang][] | select(.emoji == $current_emoji)) |
    {
        lang: $lang,
        label: .label,
        tags: ((.tags // []) + (.keywords // []))
    }
] as $emoji_data |

# Skip if no data found
if ($emoji_data | length) == 0 then empty else

# Build the searchable tags string
(
    $emoji_data |
    map(.tags | join(" ")) |
    join(" ") |
    # Remove empty entries and extra spaces
    gsub("  +"; " ") | gsub("^ +| +$"; "")
) as $searchable_tags |

# Format output: emoji "label1" - "label2" - "label3"  (tags)
$current_emoji + " " +
(
    $emoji_data |
    map("\"" + .label + "\"") |
    join(" - ")
) +
# Only add parentheses if there are searchable tags
(if ($searchable_tags | length) > 0 then "  (" + $searchable_tags + ")" else "" end)

end
' > "$CACHED_DB"

echo "✓ Emoji database cached successfully" >&2

# Launch wofi emoji selector
SELECTED="$(wofi -p "emoji" --show dmenu -i < "$CACHED_DB")"

# Extract just the emoji if something was selected
if [[ -n "$SELECTED" ]]; then
    EMOJI=$(echo "$SELECTED" | sed 's/ .*//')
    
    # Check for required tools only when we need to use them
    if command -v wtype &> /dev/null; then
        wtype "$EMOJI"
    else
        echo "Warning: wtype not found, cannot type emoji" >&2
    fi
    
    if command -v wl-copy &> /dev/null; then
        wl-copy "$EMOJI"
    else
        echo "Warning: wl-copy not found, cannot copy emoji" >&2
    fi
fi
